#!/bin/bash

echo "Automated script for downloading and preparing GO"
echo "Setup BAZO-Client - Started"
echo "  Downloading BAZO-Client from Github"
cd 
go get github.com/pkg/errors
go get github.com/bazo-blockchain/bazo-client
cd /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-client
git pull 
git checkout aduno_copy-cherry-picks
go build
cd 
echo "Setup BAZO-Client - Finished"
echo " "

cd /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-miner
git pull 
git checkout aduno_copy-cherry-picks
go build
echo "Download & build of BAZO-Miner - Finished"
echo " "

echo "Creating Account for this machines Miner"
cd /home/ubuntu/BAZO-Scripts-Fabio
git pull origin
cp RootWallet.txt /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-client
cp RootWallet.txt /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-miner
cp RootCommitment.txt /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-miner
cd /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-client

cd /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-client
echo this machines public ip:
pbIP=$(curl https://ipinfo.io/ip)
echo $pbIP
echo enter bootstrap ip: [number]
read btIP
jq '.this_client.ip="'$pbIP'"' configuration.json > temp.json
rm configuration.json
jq '.bootstrap_server.ip="'$btIP'"' temp.json > configuration.json
echo "configuration.json"
cat configuration.json
rm temp.json
cd
cd /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-client
./bazo-client account create --rootwallet RootAccountWallet.txt --wallet Wallet.txt 

echo " "
echo "Account Transaction [accTx] verified? if yes insert [y], if not restart miner and insert [n]: [y/n]"
read restarted
if [ "$restarted" = "n" ]
  then ./bazo-client account create --rootwallet RootAccountWallet.txt --wallet Wallet.txt 
  else echo "Perfect!"
fi

echo " "
echo "Please insert transaction count [txcount] for root account (same as in block mentioned): [number]"
read answer
echo transfer 2000 from RootAccount to this account.
echo ./bazo-client funds --from RootAccountWallet.txt --to Wallet.txt --txcount $answer --amount 2000 --multisig RootAccountWallet.txt
./bazo-client funds --from RootAccountWallet.txt --to Wallet.txt --txcount $answer --amount 2000 --multisig RootAccountWallet.txt

echo " "
echo "Restart Miner if Sig1 invalid error occurs. After Miner restarted insert [y], When error does not occur insert [n]:"
read restarted
if [ "$restarted" = "y" ]
  then ./bazo-client funds --from RootAccountWallet.txt --to Wallet.txt --txcount $answer --amount 2000 --multisig RootAccountWallet.txt
  else echo "this will crash... Better abort mission now!!!"
fi

echo " "
echo "Funds transaction successfully verified: [y/n]"
read restarted
if [ "$restarted" = "y" ]
  then echo "Perfect!"
  else echo "this will crash... Better abort mission now!!!"
fi
echo " "
echo "enable staking for new account" 
echo ./bazo-client staking enable --wallet Wallet.txt --commitment Commitment.txt
./bazo-client staking enable --wallet Wallet.txt --commitment Commitment.txt

echo " "
echo "Is new account staking now? if yes [y], if it is not staking, restart miner and insert [n] : [y/n]"
read restarted
if [ "$restarted" = "n" ]
  then ./bazo-client staking enable --wallet Wallet.txt --commitment Commitment.txt
  else "Perfect!"
fi
cp Wallet.txt /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-miner
cp Commitment.txt /home/ubuntu/go/src/github.com/bazo-blockchain/bazo-miner
cd
echo " "
echo "./bazo-miner start --database Store.db --address $(pbIP):8000 --bootstrap $btIP:8000 --wallet Wallet.txt --commitment Commitment.txt --multisig RootAccountWallet.txt --rootwallet RootAccountWallet.txt --rootcommitment RootAccountCommitment.txt --confirm"

